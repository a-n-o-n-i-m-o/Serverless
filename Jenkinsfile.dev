def deployFunction(String functionName) {
 
            withCredentials([file(credentialsId: 'devioz-corporativo-gcp-devops-analitica-dev', variable: 'SECRET')]) {
                sh "ls -lsa"
                sh "pwd"
                sh "gcloud auth activate-service-account --key-file=\$SECRET"
                sh "gcloud config set project ${GCP_PROJECT_ID}"
                sh """ gcloud alpha functions deploy ${GCP_NAME} \
                        --gen2 \
                        --region=${GCP_LOCATION} \
                        --runtime=${GCP_RUNTIME} \
                        --trigger-http \
                        --memory ${GCP_MEMORY} \
                        --entry-point ${GCP_ENTRY_POINT} \
                        --timeout ${GCP_TIMEOUT} \
                        --max-instances ${GCP_MAXINTANCES} \
                        --ingress-settings all \
                        --service-account ${GCP_SERVICE_ACCOUNT} \
                        --source=. \
                        --env-vars-file .env.yaml \
                        --allow-unauthenticated """
            
        }
}

def functionNames = [
    'ingesta-crossnet-data-plana'
]

pipeline {

        agent any

        environment {
                RUTA_SOURCE = 'source'
                RUTA_SOURCE_FILES = 'src'
                GCP_NAME = 'ingesta-crossnet-data-plana'
                GCP_PROJECT_ID = 'devioz-pe-dev-analitica'
                GCP_SERVICE_ACCOUNT = 'alfredo@devioz-pe-dev-analitica.iam.gserviceaccount.com'
                GCP_RUNTIME = 'python310'
                GCP_ENTRY_POINT = 'main'
                GCP_MEMORY = '16384'
                GCP_TIMEOUT = 540
                GCP_MAXINTANCES = 2
                GCP_LOCATION = 'us-central1'
        }

        stages {
        stage('Descargar Fuentes') {
            steps {
                deleteDir()
                dir("${RUTA_SOURCE}") {
                    checkout scm
                }
            }
        }

        stage('Despliegue Funciones') {
            steps {
                script {
                    functionNames.each { functionName ->
                        deployFunction(functionName)
                    }
                }
            }
        }

        stage('Limpiar Workspace') {
            steps {
                deleteDir()
            }
        }
    }
}